---
title: "Docker"
date-modified: last-modified
---

Docker is a containerization platform. 
I use it run a host of applications. 

# Installation

## Development

Curtesy of Novaspirit's [Pi-Hosted Series](https://github.com/pi-hosted/pi-hosted/blob/master/install_docker.sh).

Setting up docker in a development environment:

:::{.callout-warning}
I only do this on a raspberry pi 4b that I use for testing.

Always read the script first. 
Using `curl` to pipe a shell script is always looked down upon.
Especially when using `sudo`.
:::


```{.sh}
$ sudo curl -sSL https://get.docker.com | sh || error "Failed to install Docker."
$ sudo usermod -aG docker $USER || error "Failed to add user to the Docker usergroup."
```

## Production

Follow Docker's official [documentation](https://docs.docker.com/engine/install/ubuntu/).
I use Ubuntu as my production OS.

1. Set up `apt` repository:

```{.sh}
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
```

2. Install docker packages:

```{.sh}
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

3. Add user to docker group:

```{.sh}
$ sudo usermod -aG docker $USER
```
# Config

You can configure the docker daemon by updating the following file: `/etc/docker/daemon.json`

I recommend updating this config file to store the daemon data to a directory other than the default: `/var/lib/docker`.

```{.json}
{
  "data-root": "/mnt/docker-data"
}
```

I run docker as a dedicated LXC in proxmox.
Without this modification I found my root partition quickly fill up as I pulled multiple images. 
This prevented me from updating my system.

# Commands

## System 

### Start Daemon

```{.sh}
$ systemctl start docker
```

### Prune

Use `prune` to remove docker objects.

Use `system` to prune everything. 
This includes `container`, `network`, and `image`.

To also remove volumes, use the `--volumes` flag.

```{.sh}
$ docker system prune
```

To remove all images not associated to a container. 

```{.sh}
$ docker image prune -a
```

## Compose

### Start

```{.sh}
$ docker compose up

# Detached - Background Process
$ docker compose up -d
```

### Stop

```{.sh}
$ docker compose down
```

## Networking

### Create

```{.sh}
$ docker network create -d bridge NETWORK
```

### Disconnect

```{.sh}
$ docker network disconnect {network} {container}
```